/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/missile.glb --types 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { Float, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { degToRad } from "three/src/math/MathUtils.js";

type GLTFResult = GLTF & {
	nodes: {
		Missile_Q001_Missile_Q010: THREE.Mesh;
		Missile_Q008: THREE.Mesh;
	};
	materials: {
		phong1SG: THREE.MeshStandardMaterial;
	};
	animations: GLTFAction[];
};

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export const Missile = (props: JSX.IntrinsicElements["group"]) => {
	const { nodes, materials } = useGLTF("/models/missile.glb") as GLTFResult;

	const missileRef = useRef<THREE.Group<THREE.Object3DEventMap>>(null);

	return (
		<group {...props} dispose={null} ref={missileRef} rotation-y={degToRad(90)}>
			<Float speed={5} rotationIntensity={0.1} floatingRange={[-1, 0]}>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Missile_Q001_Missile_Q010.geometry}
					material={materials.phong1SG}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Missile_Q008.geometry}
					material={materials.phong1SG}
				/>
			</Float>
		</group>
	);
};

useGLTF.preload("/models/missile.glb");
