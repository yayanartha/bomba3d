/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/Characters_Captain_Barbarossa.gltf --types 
*/

import * as THREE from "three";
import { useEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import { degToRad } from "three/src/math/MathUtils.js";

type GLTFResult = GLTF & {
	nodes: {
		Weapon_Cutlass: THREE.Mesh;
		Captain_Barbarossa_: THREE.SkinnedMesh;
		Ernest: THREE.SkinnedMesh;
		Root: THREE.Bone;
	};
	materials: {
		Atlas: THREE.MeshStandardMaterial;
	};
	animations: GLTFAction[];
};

type ActionName =
	| "Death"
	| "Duck"
	| "HitReact"
	| "Idle"
	| "Jump"
	| "Jump_Idle"
	| "Jump_Land"
	| "No"
	| "Punch"
	| "Run"
	| "Sword"
	| "Walk"
	| "Wave"
	| "Yes";
interface GLTFAction extends THREE.AnimationClip {
	name: ActionName;
}

type Props = {
	color?: string;
	animation: ActionName;
} & JSX.IntrinsicElements["group"];

export const CharacterCaptain = ({
	color = "blue",
	animation = "Idle",
	...props
}: Props) => {
	const group = useRef<THREE.Group<THREE.Object3DEventMap>>(null);
	const { nodes, materials, animations } = useGLTF(
		"models/Characters_Captain_Barbarossa.gltf",
	) as GLTFResult;
	const { actions } = useAnimations(animations, group);

	if (actions.Death) {
		actions.Death.loop = THREE.LoopOnce;
		actions.Death.clampWhenFinished = true;
	}

	useEffect(() => {
		actions[animation]?.reset().fadeIn(0.2).play();

		return () => {
			actions.Idle?.fadeOut(0.2);
		};
	}, [animation, actions]);

	return (
		<group ref={group} {...props} dispose={null}>
			<group name="Scene" rotation-y={degToRad(180)}>
				<group name="CharacterArmature">
					<primitive object={nodes.Root} />
					<skinnedMesh
						name="Captain_Barbarossa_"
						geometry={nodes.Captain_Barbarossa_.geometry}
						material={materials.Atlas}
						skeleton={nodes.Captain_Barbarossa_.skeleton}
						castShadow
						receiveShadow
					/>
					<skinnedMesh
						name="Ernest"
						geometry={nodes.Ernest.geometry}
						material={materials.Atlas}
						skeleton={nodes.Ernest.skeleton}
						castShadow
						receiveShadow
					/>
				</group>
			</group>
		</group>
	);
};

useGLTF.preload("models/Characters_Captain_Barbarossa.gltf");
